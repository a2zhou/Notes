setwd('../src/')
proc.time()[3]->t
library(vars)
library(urca)
library(snow)
library(snowfall)
library(rlecuyer)
library(boot)
source('step1.R')
source('brw.R')
source('step2.class.R')
n=1000
pd=2
x=30
knife=T
obs.e.r=10
sfInit(parallel=T, cpus=3, type='SOCK')
sfLibrary(vars)
sfLibrary(urca)
sfLibrary(boot)
sfExportAll()
sfClusterSetupRNG()
# obs.error
t.bot=sspp(n=2000, rec='bot')
var.P2=var(t.bot$P[200:2000])
var.N2=var(t.bot$N[200:2000])
# 5% obs.error rate
# 10% obs.error rate
# 20% obs.error rate
size.bot=sqrt(obs.e.r/100*c(var.N2, var.P2))
rzl<-sfLapply(1:n, simu, rec='non.b', range=x, drax=knife, size=size.bot)
z1.non.b=sapply(rzl, function(x){x[1,2]})
z2.non.b=sapply(rzl, function(x){x[1,3]})
stater.non.b=sapply(rzl, function(x){x[1,4]})
statev.non.b=sapply(rzl, function(x){x[1,5]})
perf.non.b=sapply(rzl, function(x){x[1,6]})
signx.non.b=sapply(rzl, function(x){x[1,7]})
statec.non.b=sapply(rzl, function(x){x[1,8]})
statel.non.b=sapply(rzl, function(x){x[1,9]})
rm(list='rzl')
sfStop()
te=proc.time()[3]-t
print(te)
length(stater.non.b[which(stater.non.b=='non')])/n
length(statev.non.b[which(statev.non.b=='non')])/n
dim(stater.non)
length(stater.non)
length(stater.non.b)
save(list=ls(), file='../output/10pctError.RData')
